case "$TERM" in
	xterm*)
		export TERM="xterm-256color"
		;;
	rxvt*)
		export TERM="rxvt-256color"
		;;
	screen*)
		export TERM="screen-256color"
		;;
	*)
		;;
esac
	
# Output the number of current jobs running in the background
function __ps1_exit_status() {
	[ $1 -ne 0 ] && echo -n "(E:${1}) "
}

# Output the number of current jobs running in the background
function __ps1_jobs_run() {
	[ $1 -gt 0 ] && echo -n "bg:${1} "
}

# Output information about the current directory's repository
function __ps1_repo_info() {
	type __git_ps1 &> /dev/null && __git_ps1 "$@"
}

# Keep a cached date variable for prompt testing
PROMPT_COMMAND="__ps1_var_date=\$(\date +%s); $PROMPT_COMMAND"

# caching the directory information for bash prompt to reduce disk reads
__ps1_var_dirinfo="0|0b"
__ps1_var_dirinfotime=0
__ps1_var_dirinfoprev=0
[ -z $__ps1_var_dirinforeloadtime ] && __ps1_var_dirinforeloadtime=60
function __ps1_dir_wrapper() {
	local lsout lsnum lssize curdir
	curdir="$(\pwd)"

	# refresh every minute or on directory change
	if [[ $(( $__ps1_var_date - $__ps1_var_dirinforeloadtime )) -gt $__ps1_var_dirinfotime || "$curdir" != "$__ps1_var_dirinfoprev" ]]; then
		lsout=$(\ls -lAh)
		lsnum=$(($(echo "${lsout}" | \wc -l | \sed "s/ //g") - 1))
		lssize="$(echo "${lsout}" | \grep -m 1 total | \sed "s/total //")b"
	
		__ps1_var_dirinfo="${lsnum}|${lssize}"
		__ps1_var_dirinfoprev="$curdir"
		__ps1_var_dirinfotime=$(\date +%s)
		# update the prompt time
		__ps1_var_date=$__ps1_var_dirinfotime
	fi
}
# only run working directory information command when enabled
if [ -z "$_PS1_HIDE_DIR_INFO" ] ; then
	PROMPT_COMMAND="$PROMPT_COMMAND __ps1_dir_wrapper;"
fi

# generate the bash prompt
function __ps1_create() {
	# quick reference to colors
	local COLOR_BOLD='\[\e[1m\]'
	local COLOR_UNDERLINE='\[\e[4m\]'
	local COLOR_RESET='\[\e[0m\]'
	local COLOR_GREY='\[\e[38;5;244m\]'
	local COLOR_DARK_GREY='\[\e[38;5;235m\]'
	# colors for individual parts of the bash prompt
	local COLOR_EXIT_ERROR='\[\e[38;5;196m\]'
	local COLOR_BG_JOBS='\[\e[38;5;42m\]'
	local COLOR_USER='\[\e[38;5;197m\]'
	local COLOR_HOST='\[\e[38;5;208m\]'
	local COLOR_HOST_SCREEN='\[\e[4m\]\[\e[38;5;214m\]'
	local COLOR_WORK_DIR='\[\e[38;5;142m\]'
	local COLOR_WORK_DIRINFO='\[\e[38;5;35m\]'
	local COLOR_GIT='\[\e[38;5;135m\]'
	
	# load avg colorization
	local loadavg='
		load=$(__ps1_proc_use);
		loadcolors_0="\[\e[38;5;111m\]"
		loadcolors_1="\[\e[38;5;110m\]"
		loadcolors_2="\[\e[38;5;109m\]"
		loadcolors_3="\[\e[38;5;108m\]"
		loadcolors_4="\[\e[38;5;107m\]"
		loadcolors_5="\[\e[38;5;106m\]"
		loadcolors_6="\[\e[38;5;178m\]"
		loadcolors_7="\[\e[38;5;172m\]"
		loadcolors_8="\[\e[38;5;166m\]"
		loadcolors_9="\[\e[38;5;167m\]"
	'
	case "$DOTENV" in
		linux)
			loadavg=$loadavg'
				__ps1_var_loadmod=$(echo "${load}" | \\sed "s/^0*\\([0-9]\\+\\)\\..\\+\\$/\\1/")
			'
			;;
		darwin)
			loadavg=$loadavg'
				__ps1_var_loadmod=$(echo "${load}" | \\sed "s/^0*\\([0-9][0-9]*\\)\\..*\\$/\\1/")
			'
			;;
	esac
	loadavg=$loadavg'
		[ $__ps1_var_loadmod -gt 9 ] && __ps1_var_loadmod=9
		loadcolor="loadcolors_${__ps1_var_loadmod}"
		echo "${!loadcolor}${load}'"${COLOR_RESET}"' "
	'
	if [ -n "$_PS1_HIDE_LOAD" ] ; then
		loadavg=''
	fi
	
	# datetime colorization
	local datetime='
		time=$(\\date +"%H")
		color="\[\e[38;5;033m\]"
		if [ ${time} -ge 8 -a ${time} -le 18 ]; then
		   color="\[\e[38;5;244m\]"
		fi
		echo "${color}\T'"${COLOR_RESET}"'"
	';

	# Start PS1 description
	PS1=''
	# open bracket
	PS1="$PS1""${COLOR_BOLD}${COLOR_GREY}"'['"${COLOR_RESET}"
	# show exit code
	PS1="$PS1""${COLOR_EXIT_ERROR}"'$(__ps1_exit_status "$?")'"${COLOR_RESET}"
	# show number of background jobs
	PS1="$PS1""${COLOR_BG_JOBS}"'$(__ps1_jobs_run "\j")'"${COLOR_RESET}"
	# time
	PS1="$PS1\$($datetime)"' '
	# load
	PS1="$PS1\$($loadavg)"
	# user
	PS1="$PS1""${COLOR_USER}"'\u'"${COLOR_RESET}"
	# [@] based on environment
	PS1="$PS1""${COLOR_GREY}"
	# If ssh connection
	if [ -n "${SSH_CONNECTION:-}" ]; then
		PS1="$PS1"'@'
	else
		# otherwise
		PS1="$PS1"'#'
	fi
	PS1="$PS1""${COLOR_RESET}"
	# [host|screen session]
	case "$TERM" in
		screen*)
			PS1="$PS1""${COLOR_HOST_SCREEN}""$STY"
			;;
		*)
			PS1="$PS1""${COLOR_HOST}"'\h'
			;;
	esac
	# space
	PS1="$PS1""${COLOR_RESET}"' '
	# working directory
	PS1="$PS1""${COLOR_WORK_DIR}"'\W'"${COLOR_RESET}"
	# working directory information (number of files | total file size)
	if [ -z "$_PS1_HIDE_DIR_INFO" ] ; then
		PS1="$PS1""${COLOR_WORK_DIRINFO}"'<${__ps1_var_dirinfo}>'"${COLOR_RESET}"
	fi
	# git status
	PS1="$PS1""${COLOR_GIT}"'$(__ps1_repo_info " (%s)")'"${COLOR_RESET}"
	# close bracket
	PS1="$PS1""${COLOR_BOLD}${COLOR_GREY}"']'"${COLOR_RESET}"
	# prompt symbol
	case "$UID" in
		0 )
			PS1="$PS1""${COLOR_BOLD}$(echo -e "\xCE\xBC")${COLOR_RESET}"
			;;
		* )
			PS1="$PS1""${COLOR_BOLD}$(echo -e "\xCE\xBB")${COLOR_RESET}"
			;;
	esac
	# space
	PS1="$PS1"' '

	# Set the title bar if we are in xterm
	case "$TERM" in
		xterm*|rxvt*)
			PS1="\[\e]0;\u@\h:\W\007\]$PS1"
			;;
		*)
			;;
	esac
}
# Execute the prompt creation function
__ps1_create
export PS1
export PS2="$(echo -e "\xe2\x86\x92") "
unset __ps1_create

# show git status
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAM="auto"
